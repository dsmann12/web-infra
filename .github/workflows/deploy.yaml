on:
  push:
    branches:
      - main

jobs:
  test:
    uses: ./.github/workflows/test.yaml
    secrets: inherit  # Ensure secrets are passed to the reusable workflow

  deploy:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write
      contents: read
    env:
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      PORTFOLIO_DJANGO_SECRET: ${{ secrets.PORTFOLIO_DJANGO_SECRET }}
      PORTFOLIO_DEBUG: ${{ secrets.PORTFOLIO_DEBUG }}
      PORTFOLIO_ALLOWED_HOSTS: localhost,127.0.0.1
      DOMAIN: ${{ vars.DOMAIN }}
      HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file locally
        run: |
          echo "PORTFOLIO_DJANGO_SECRET=${{ secrets.PORTFOLIO_DJANGO_SECRET }}" > .env
          echo "PORTFOLIO_DEBUG=${{ secrets.PORTFOLIO_DEBUG }}" >> .env
          echo "PORTFOLIO_ALLOWED_HOSTS=${{ vars.PORTFOLIO_ALLOWED_HOSTS }}" >> .env
          echo "DOMAIN=${{ vars.DOMAIN }}" >> .env
          echo "PORTFOLIO_HOST=${{ vars.DOMAIN }}" >> .env
          echo "PORTFOLIO_PORT=443" >> .env
          echo "PORTFOLIO_SSL_LIVE_DIR=/etc/letsencrypt/live/${{ vars.DOMAIN }}" >> .env
          echo "PORTFOLIO_SSL_ARCHIVE_DIR=/etc/letsencrypt/archive/${{ vars.DOMAIN }}" >> .env
          echo "PORTFOLIO_SSL_KEYS_DIR=/etc/letsencrypt/keys" >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::390402560704:role/GithubActionsDeployRole
          aws-region: us-east-1

      - name: Deploy with CloudFormation
        run: |
          VPC_ID=${{ vars.VPC_ID }} KEY_NAME=${{ vars.KEY_NAME }} DOMAIN=${{ vars.DOMAIN }} HOSTED_ZONE_ID=${{ secrets.HOSTED_ZONE_ID }} make deploy

      - name: Get EC2 Public IP
        run: |
          echo "EC2_PUBLIC_IP=$(aws cloudformation describe-stacks --stack-name dev-hub --query "Stacks[0].Outputs[?OutputKey=='PublicIp'].OutputValue" --output text)" >> $GITHUB_ENV

      - name: Set up SSH key
        run: |
          echo "$EC2_SSH_KEY" > private-key.pem
          chmod 600 private-key.pem

      - name: Copy repository to EC2
        run: |
          rsync -avz -e "ssh -i private-key.pem -o StrictHostKeyChecking=no" --exclude '.git' ./ ubuntu@${{ vars.DOMAIN }}:/home/ubuntu/web-infra

      - name: Start Docker containers
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@${{ vars.DOMAIN }} << 'EOF'
            cd /home/ubuntu/web-infra
            docker compose down
            docker compose pull
            docker compose up -d --build
          EOF
      
      - name: Wait for the web server to be ready (with timeout)
        run: |
          timeout=60  # Timeout after 60 seconds
          elapsed=0
          while ! curl --silent --head --fail https://${{ vars.DOMAIN }}; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout reached, web server is not up after $timeout seconds."
              exit 1  # Fail the step
            fi
            echo "Waiting for web server to be ready... $elapsed seconds elapsed."
            sleep 5
            ((elapsed+=5))
          done
          echo "Web server is up and running!"